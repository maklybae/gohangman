// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"
)

// MenuProvider is an autogenerated mock type for the MenuProvider type
type MenuProvider struct {
	mock.Mock
}

type MenuProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MenuProvider) EXPECT() *MenuProvider_Expecter {
	return &MenuProvider_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function with given fields: label
func (_m *MenuProvider) AddItem(label string) {
	_m.Called(label)
}

// MenuProvider_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type MenuProvider_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - label string
func (_e *MenuProvider_Expecter) AddItem(label interface{}) *MenuProvider_AddItem_Call {
	return &MenuProvider_AddItem_Call{Call: _e.mock.On("AddItem", label)}
}

func (_c *MenuProvider_AddItem_Call) Run(run func(label string)) *MenuProvider_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MenuProvider_AddItem_Call) Return() *MenuProvider_AddItem_Call {
	_c.Call.Return()
	return _c
}

func (_c *MenuProvider_AddItem_Call) RunAndReturn(run func(string)) *MenuProvider_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// LogValue provides a mock function with given fields:
func (_m *MenuProvider) LogValue() slog.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LogValue")
	}

	var r0 slog.Value
	if rf, ok := ret.Get(0).(func() slog.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(slog.Value)
	}

	return r0
}

// MenuProvider_LogValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogValue'
type MenuProvider_LogValue_Call struct {
	*mock.Call
}

// LogValue is a helper method to define mock.On call
func (_e *MenuProvider_Expecter) LogValue() *MenuProvider_LogValue_Call {
	return &MenuProvider_LogValue_Call{Call: _e.mock.On("LogValue")}
}

func (_c *MenuProvider_LogValue_Call) Run(run func()) *MenuProvider_LogValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MenuProvider_LogValue_Call) Return(_a0 slog.Value) *MenuProvider_LogValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MenuProvider_LogValue_Call) RunAndReturn(run func() slog.Value) *MenuProvider_LogValue_Call {
	_c.Call.Return(run)
	return _c
}

// RunMenu provides a mock function with given fields:
func (_m *MenuProvider) RunMenu() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RunMenu")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MenuProvider_RunMenu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunMenu'
type MenuProvider_RunMenu_Call struct {
	*mock.Call
}

// RunMenu is a helper method to define mock.On call
func (_e *MenuProvider_Expecter) RunMenu() *MenuProvider_RunMenu_Call {
	return &MenuProvider_RunMenu_Call{Call: _e.mock.On("RunMenu")}
}

func (_c *MenuProvider_RunMenu_Call) Run(run func()) *MenuProvider_RunMenu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MenuProvider_RunMenu_Call) Return(chosenIndex int, err error) *MenuProvider_RunMenu_Call {
	_c.Call.Return(chosenIndex, err)
	return _c
}

func (_c *MenuProvider_RunMenu_Call) RunAndReturn(run func() (int, error)) *MenuProvider_RunMenu_Call {
	_c.Call.Return(run)
	return _c
}

// NewMenuProvider creates a new instance of MenuProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMenuProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MenuProvider {
	mock := &MenuProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
