// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "makly/hangman/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// GameOutputer is an autogenerated mock type for the GameOutputer type
type GameOutputer struct {
	mock.Mock
}

type GameOutputer_Expecter struct {
	mock *mock.Mock
}

func (_m *GameOutputer) EXPECT() *GameOutputer_Expecter {
	return &GameOutputer_Expecter{mock: &_m.Mock}
}

// ShowGame provides a mock function with given fields: game
func (_m *GameOutputer) ShowGame(game *domain.Game) {
	_m.Called(game)
}

// GameOutputer_ShowGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowGame'
type GameOutputer_ShowGame_Call struct {
	*mock.Call
}

// ShowGame is a helper method to define mock.On call
//   - game *domain.Game
func (_e *GameOutputer_Expecter) ShowGame(game interface{}) *GameOutputer_ShowGame_Call {
	return &GameOutputer_ShowGame_Call{Call: _e.mock.On("ShowGame", game)}
}

func (_c *GameOutputer_ShowGame_Call) Run(run func(game *domain.Game)) *GameOutputer_ShowGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Game))
	})
	return _c
}

func (_c *GameOutputer_ShowGame_Call) Return() *GameOutputer_ShowGame_Call {
	_c.Call.Return()
	return _c
}

func (_c *GameOutputer_ShowGame_Call) RunAndReturn(run func(*domain.Game)) *GameOutputer_ShowGame_Call {
	_c.Call.Return(run)
	return _c
}

// ShowGameResult provides a mock function with given fields: game
func (_m *GameOutputer) ShowGameResult(game *domain.Game) {
	_m.Called(game)
}

// GameOutputer_ShowGameResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowGameResult'
type GameOutputer_ShowGameResult_Call struct {
	*mock.Call
}

// ShowGameResult is a helper method to define mock.On call
//   - game *domain.Game
func (_e *GameOutputer_Expecter) ShowGameResult(game interface{}) *GameOutputer_ShowGameResult_Call {
	return &GameOutputer_ShowGameResult_Call{Call: _e.mock.On("ShowGameResult", game)}
}

func (_c *GameOutputer_ShowGameResult_Call) Run(run func(game *domain.Game)) *GameOutputer_ShowGameResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Game))
	})
	return _c
}

func (_c *GameOutputer_ShowGameResult_Call) Return() *GameOutputer_ShowGameResult_Call {
	_c.Call.Return()
	return _c
}

func (_c *GameOutputer_ShowGameResult_Call) RunAndReturn(run func(*domain.Game)) *GameOutputer_ShowGameResult_Call {
	_c.Call.Return(run)
	return _c
}

// ShowInputError provides a mock function with given fields: err
func (_m *GameOutputer) ShowInputError(err error) {
	_m.Called(err)
}

// GameOutputer_ShowInputError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowInputError'
type GameOutputer_ShowInputError_Call struct {
	*mock.Call
}

// ShowInputError is a helper method to define mock.On call
//   - err error
func (_e *GameOutputer_Expecter) ShowInputError(err interface{}) *GameOutputer_ShowInputError_Call {
	return &GameOutputer_ShowInputError_Call{Call: _e.mock.On("ShowInputError", err)}
}

func (_c *GameOutputer_ShowInputError_Call) Run(run func(err error)) *GameOutputer_ShowInputError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *GameOutputer_ShowInputError_Call) Return() *GameOutputer_ShowInputError_Call {
	_c.Call.Return()
	return _c
}

func (_c *GameOutputer_ShowInputError_Call) RunAndReturn(run func(error)) *GameOutputer_ShowInputError_Call {
	_c.Call.Return(run)
	return _c
}

// NewGameOutputer creates a new instance of GameOutputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameOutputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameOutputer {
	mock := &GameOutputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
