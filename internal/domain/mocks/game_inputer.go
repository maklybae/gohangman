// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GameInputer is an autogenerated mock type for the GameInputer type
type GameInputer struct {
	mock.Mock
}

type GameInputer_Expecter struct {
	mock *mock.Mock
}

func (_m *GameInputer) EXPECT() *GameInputer_Expecter {
	return &GameInputer_Expecter{mock: &_m.Mock}
}

// GetLetter provides a mock function with given fields:
func (_m *GameInputer) GetLetter() (rune, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLetter")
	}

	var r0 rune
	var r1 error
	if rf, ok := ret.Get(0).(func() (rune, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() rune); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rune)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameInputer_GetLetter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLetter'
type GameInputer_GetLetter_Call struct {
	*mock.Call
}

// GetLetter is a helper method to define mock.On call
func (_e *GameInputer_Expecter) GetLetter() *GameInputer_GetLetter_Call {
	return &GameInputer_GetLetter_Call{Call: _e.mock.On("GetLetter")}
}

func (_c *GameInputer_GetLetter_Call) Run(run func()) *GameInputer_GetLetter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GameInputer_GetLetter_Call) Return(letter rune, err error) *GameInputer_GetLetter_Call {
	_c.Call.Return(letter, err)
	return _c
}

func (_c *GameInputer_GetLetter_Call) RunAndReturn(run func() (rune, error)) *GameInputer_GetLetter_Call {
	_c.Call.Return(run)
	return _c
}

// NewGameInputer creates a new instance of GameInputer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameInputer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameInputer {
	mock := &GameInputer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
